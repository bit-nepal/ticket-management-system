@page "/ticket"
@inject tms.Services.Printer.IPrinterService printerService;
<PageTitle>Ticket Creation</PageTitle>

<h1>Create a Ticket</h1>

<Card Style="width:18rem;">
    <CardHeader>
        Ticket Creation Form
    </CardHeader>
    <CardBody>
        <EditForm Model="@ticket" class="form-inline" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Nationality Selection -->
            <div class="form-group mt-4">
                <label for="Nationality" class="h5">Nationality:</label>
                <InputSelect @bind-Value="ticket.Nationality">
                    @foreach (var nationality in Enum.GetValues(typeof(Nationality)))
                    {
                        <option value="@nationality">@nationality</option>
                    }
                </InputSelect>
            </div>

            <!-- Person Type for Nepali -->
            @if (ticket.Nationality == Nationality.Nepali)
            {
                <div class="form-group mt-4">
                    <label for="PersonType" class="h5">Person Type:</label>
                    <InputSelect @bind-Value="ticket.PersonType">
                        @foreach (var person in Enum.GetValues(typeof(PersonType)))
                        {
                            <option value="@person">@person</option>
                        }
                    </InputSelect>
                </div>
            }

            <!-- Group Visit Switch -->
            <div class="form-group mt-4">
                <label for="GroupVisit" class="h5">Group Visit:</label>
                <Switch @bind-Value="ticket.IsGroupVisit"/>
            </div>

            <!-- Group Visit Details -->
            @if (ticket.IsGroupVisit)
            {
                <div class="form-group mt-4">
                    <label for="NoOfPeople" class="h5">No. of People</label>
                    <NumberInput TValue="int" @bind-Value="ticket.NoOfPeople" />
                </div>

                <div class="form-group mt-4">
                    <label for="CustomText" class="h5">Group Name:</label>
                    <InputText @bind-Value="ticket.CustomText" Placeholder="Enter group name" />
                </div>
            }

            <!-- Add-On Selection -->
            <div class="form-group mt-4">
                <label for="AddOn" class="h5">Add Ons:</label>
                @foreach (var addonType in Enum.GetValues(typeof(AddOnType)).Cast<AddOnType>())
                {
                    var currentAddon = GetOrCreateAddOn(addonType);
                    <div class="form-group mt-4">
                        <label for="@addonType" class="h5">@addonType  </label>
                        @if (ticket.IsGroupVisit)
                        {
                            <InputNumber TValue="int" @bind-Value="currentAddon.Quantity" class="form-control" />
                        }
                        else
                        {
                            <InputCheckbox @bind-Value="currentAddon.IsSelected" class="form-check-input" />
                        }
                    </div>
                }
            </div>

            <!-- Submit Button -->
            <div class="d-grid gap-2 col-6 mx-auto mt-4">
                <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Submit</Button>
            </div>
        </EditForm>
    </CardBody>
</Card>



@code {
    tms.Data.Ticket ticket = new tms.Data.Ticket
    {
        AddOns = new List<AddOn>
        {
            new AddOn { AddOnType = AddOnType.Camera, Quantity = 0 },
            new AddOn { AddOnType = AddOnType.VideoCamera, Quantity = 0 }
        }
    };

    private async Task HandleValidSubmit()
    {
        SanitizeTicketData();
        PrintData();
        printerService.PrintTicket(ticket);
    }

    private AddOn GetOrCreateAddOn(AddOnType type)
    {
        var addon = ticket.AddOns.FirstOrDefault(a => a.AddOnType == type);
        if (addon == null)
        {
            addon = new AddOn { AddOnType = type };
            ticket.AddOns.Add(addon);
        }
        return addon;
    }
    private void SanitizeTicketData()
    {
      if (ticket.Nationality != Nationality.Nepali) ticket.PersonType = PersonType.General;
      foreach (var addon in ticket.AddOns)
      {
          if (!ticket.IsGroupVisit) addon.Quantity = addon.IsSelected ? 1 : 0;
          else addon.Quantity = addon.Quantity > 0 ? addon.Quantity : 0;
      }
    }
    private void PrintData()
    {
        Console.WriteLine("Nationality: " + ticket.Nationality);
        Console.WriteLine("Person Type: " + ticket.PersonType);
        Console.WriteLine("Group Visit: " + ticket.IsGroupVisit);
        Console.WriteLine("No. of People: " + ticket.NoOfPeople);
        Console.WriteLine("Group Name: " + ticket.CustomText);

        foreach (var addon in ticket.AddOns)
        {
            Console.WriteLine($"Addon {addon.AddOnType}: Quantity = {addon.Quantity}");
        }
    }
}

