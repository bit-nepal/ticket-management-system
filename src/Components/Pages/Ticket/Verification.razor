@page "/verification"
@inject TicketService ticketService;


<Offcanvas 
@ref="offcanvas" 
UseStaticBackdrop="true" 
style="width: 0px; 
             height:0px;" />

<input type="text" 
@ref="barCodeInput" 
@bind-value="barCodeData" 
@bind-value:event="oninput" 
@onkeydown="Enter"
@onblur="lostFocus"
style="position:absolute; 
                opacity:0; 
                height:10px; 
                width:10px;"/>

@if (IsValid)
{
    <Card Color="CardColor.Success" Class="my-card-container-green responsive-card mt-4 mb-4">
        <CardHeader Class="rounded-3">Ticket Verification: VALID</CardHeader>
        <CardBody>
            <CardTitle>The ticket is valid.</CardTitle>
            <CardText Class="card-content">You can enter the museum premises.</CardText>
        </CardBody>
    </Card>

    <h3>Verified Ticket Details:</h3>

    <Card Style="width:18rem;">
        <ul class="list-group list-group-flush">
            <li class="list-group-item">
                Nationality: @ticket?.Nationality &nbsp; @if (ticket.Nationality == Nationality.Nepali && ticket.PersonType == PersonType.Student)
                {
                    @ticket.PersonType;                }
            </li>
            @if (ticket.IsGroupVisit)
            {
                <li class="list-group-item">No. of people: @ticket.NoOfPeople</li>
                <li class="list-group-item">Group Name: @ticket.CustomText</li>
                <li class="list-group-item">Camera: @ticket.AddOns.FirstOrDefault(x => x.AddOnType == AddOnType.Camera)?.Quantity</li>
                <li class="list-group-item">VideoCamera: @ticket.AddOns.FirstOrDefault(x => x.AddOnType == AddOnType.VideoCamera)?.Quantity</li>
            }else{
                <li class="list-group-item"> 
                    Camera : 
                    @(ticket.AddOns.FirstOrDefault(x => x.AddOnType == AddOnType.Camera)?.TotalPrice > 0 ? "✓" : "✕")
                </li>
                <li class="list-group-item">
                    VideoCamera :
                    @(ticket.AddOns.FirstOrDefault(x => x.AddOnType == AddOnType.VideoCamera)?.TotalPrice > 0 ? "✓" : "✕")
                </li>
            }

        </ul>
    </Card>
}
else
{
    <Card Color="CardColor.Danger" Class="my-card-container-red responsive-card mt-4 mb-4">
        <CardHeader Class="rounded-3">INVALID</CardHeader>
        <CardBody>
            <CardTitle>The ticket is invalid.</CardTitle>
            <CardText Class="card-content">Sorry, you cannot enter. Please purchase new ticket to verify.</CardText>
        </CardBody>
    </Card>
}

<style>
    .my-card-container-red {
    padding: 15px;
    margin: auto;
    border-radius: 15px;
    border: none;
    width: 35rem;
    box-shadow: 0 0 15px rgba(255, 0, 0, 0.7), 0 0 30px rgba(255, 0, 0, 0.5), 0 0 45px rgba(255, 0, 0, 0.3);
    background-color: #fff; 
    }

    .my-card-container-green {
    padding: 15px;
    margin: auto;
    border-radius: 15px;
    border: none;
    width: 35rem;
    box-shadow: 0 0 15px rgba(0, 255, 0, 0.7), 0 0 30px rgba(0, 255, 0, 0.5), 0 0 45px rgba(0, 255, 0, 0.3);
    background-color: #fff;
    }

    @@media (max-width: 576px) {
    .my-card-container-green, .my-card-container-red
    {
    padding: 1rem; /* Add padding for smaller screens */
    font-size: 1rem; /* Adjust text size */
    width: 19rem;
    margin: auto;
    }

    }


</style>
<div style="position:fixed; top:50%; left:50%">
    <Spinner Type="SpinnerType.Dots" Size="SpinnerSize.ExtraLarge" Visible="@isLoading" />
</div>

<div style="position: fixed; bottom: 0; right:0;">
    @barCodeData
</div>


@code{
    private bool IsValid;
    private bool isLoading;
    private tms.Data.Ticket?  ticket;
    private string barCodeData;
    private Offcanvas? offcanvas;
    private ElementReference barCodeInput;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        { 
            await barCodeInput.FocusAsync();
        }
    }

    private void lostFocus(){
        barCodeInput.FocusAsync();
    }

    public async void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await offcanvas.ShowAsync();
            isLoading = true;
            ValidateBarCode();
        }
    }

    private async void ValidateBarCode()
    {
        Console.WriteLine($"Validating BarCode: {barCodeData}");
        ticket = await ticketService.VerifyTicket(barCodeData) ;
        IsValid = ticket is not null;
        barCodeData = String.Empty;
        isLoading = false;

        if (offcanvas is not null)
        {
            await offcanvas.HideAsync();
        }
    }
}
