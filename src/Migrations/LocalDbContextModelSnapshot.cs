// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tms.Data.Context;

#nullable disable

namespace tms.Migrations
{
    [DbContext(typeof(LocalDbContext))]
    partial class LocalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("AddOn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("AddOnType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("AddOn", (string)null);
                });

            modelBuilder.Entity("DailyRevenue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateAD")
                        .HasColumnType("TEXT");

                    b.Property<int>("MonthlyRevenueId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TicketNoEnd")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TicketNoStart")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MonthlyRevenueId");

                    b.ToTable("DailyRevenues", (string)null);
                });

            modelBuilder.Entity("MonthlyRevenue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearlyRevenueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("YearlyRevenueId");

                    b.ToTable("MonthlyRevenues", (string)null);
                });

            modelBuilder.Entity("RevenueCell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DailyRevenueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoOfPeople")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DailyRevenueId");

                    b.ToTable("RevenueCells", (string)null);
                });

            modelBuilder.Entity("YearlyRevenue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("YearlyRevenues", (string)null);
                });

            modelBuilder.Entity("tms.Data.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("BarCodeData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomText")
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGroupVisit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Nationality")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoOfPeople")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketNo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("AddOn", b =>
                {
                    b.HasOne("tms.Data.Ticket", null)
                        .WithMany("AddOns")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("DailyRevenue", b =>
                {
                    b.HasOne("MonthlyRevenue", "MonthlyRevenue")
                        .WithMany("DailyRevenues")
                        .HasForeignKey("MonthlyRevenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DailyRevenue.DateBS#NepaliDate", "DateBS", b1 =>
                        {
                            b1.Property<int>("DailyRevenueId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Day")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Month")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Year")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DailyRevenueId");

                            b1.ToTable("DailyRevenues", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DailyRevenueId");
                        });

                    b.Navigation("DateBS")
                        .IsRequired();

                    b.Navigation("MonthlyRevenue");
                });

            modelBuilder.Entity("MonthlyRevenue", b =>
                {
                    b.HasOne("YearlyRevenue", "YearlyRevenue")
                        .WithMany("MonthlyRevenues")
                        .HasForeignKey("YearlyRevenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("YearlyRevenue");
                });

            modelBuilder.Entity("RevenueCell", b =>
                {
                    b.HasOne("DailyRevenue", "DailyRevenue")
                        .WithMany("RevenueCells")
                        .HasForeignKey("DailyRevenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyRevenue");
                });

            modelBuilder.Entity("tms.Data.Ticket", b =>
                {
                    b.OwnsOne("tms.Data.Ticket.NepaliDate#NepaliDate", "NepaliDate", b1 =>
                        {
                            b1.Property<int>("TicketId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Day")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Month")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Year")
                                .HasColumnType("INTEGER");

                            b1.HasKey("TicketId");

                            b1.ToTable("Tickets", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.Navigation("NepaliDate")
                        .IsRequired();
                });

            modelBuilder.Entity("DailyRevenue", b =>
                {
                    b.Navigation("RevenueCells");
                });

            modelBuilder.Entity("MonthlyRevenue", b =>
                {
                    b.Navigation("DailyRevenues");
                });

            modelBuilder.Entity("YearlyRevenue", b =>
                {
                    b.Navigation("MonthlyRevenues");
                });

            modelBuilder.Entity("tms.Data.Ticket", b =>
                {
                    b.Navigation("AddOns");
                });
#pragma warning restore 612, 618
        }
    }
}
