@page "/ticket"
@inject TicketService ticketService;
@inject ToastService ToastService;

<PageTitle>Ticket Creation</PageTitle>

<Card class="my-card-container">
    <CardHeader class="bg-blue text-white text-center rounded-3">
        <h4 class="m-1">Ticket Creation Form</h4>
    </CardHeader>
    <CardBody Class="pb-2">
        <EditForm Model="@ticket" class="form-horizontal" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Nationality Selection -->
            <div class="form-group mb-3">
                <label for="Nationality" class="form-label fw-bold mb-0">Nationality:</label>
                <InputSelect class="form-control" @bind-Value="ticket.Nationality">
                    @foreach (var nationality in Enum.GetValues(typeof(Nationality)))
                    {
                        <option value="@nationality">@nationality</option>
                    }
                </InputSelect>
            </div>

            <!-- Person Type for Nepali -->
            @if (ticket.Nationality == Nationality.Nepali)
            {
                <div class="form-group mb-3">
                    <label for="PersonType" class="form-label fw-bold mb-0">Person Type:</label>
                    <InputSelect class="form-control" @bind-Value="ticket.PersonType">
                        @foreach (var person in Enum.GetValues(typeof(PersonType)))
                        {
                            <option value="@person">@person</option>
                        }
                    </InputSelect>
                </div>
            }

            <!-- Group Visit Switch -->
            <div class="form-group d-flex mb-3">
                <label for="GroupVisit" class="form-label fw-bold mb-0">Group Visit:</label> &nbsp; &nbsp;
                <Switch @bind-Value="ticket.IsGroupVisit" />
            </div>

            <!-- Group Visit Details -->
            @if (ticket.IsGroupVisit)
            {
                <div class="form-group mb-3">
                    <label for="NoOfPeople" class="form-label fw-bold mb-0">No. of People:</label>
                    <NumberInput TValue="int" class="form-control" @bind-Value="ticket.NoOfPeople" />
                </div>

                <div class="form-group mb-3">
                    <label for="CustomText" class="form-label fw-bold mb-0">Group Name:</label>
                    <InputText class="form-control" @bind-Value="ticket.CustomText" Placeholder="Enter group name" />
                </div>
            }

            <!-- Add-On Selection -->
            <div class="form-group mb-2">
                <label for="AddOn" class="form-label fw-bold">Add Ons:</label>
                @foreach (var addonType in Enum.GetValues(typeof(AddOnType)).Cast<AddOnType>())
                {
                    var currentAddon = GetOrCreateAddOn(addonType);
                    <div class="form-group mb-2 d-flex align-items-center">
                        <label for="@addonType" class="form-label fw-bold me-3">@addonType:</label>
                        @if (ticket.IsGroupVisit)
                        {
                            <InputNumber TValue="int" class="form-control" @bind-Value="currentAddon.Quantity" />
                        }
                        else
                        {
                            <InputCheckbox class="form-check-input mb-2" @bind-Value="currentAddon.IsSelected" />
                        }
                    </div>
                }
            </div>

            <!-- Submit Button -->
            <div class="d-grid gap-2 mt-4">
                <Button Type="ButtonType.Submit" Color="ButtonColor.Success" Size="ButtonSize.Large" Style=" border-color: #6f42c1;">
                    Print &nbsp; <i class="bi bi-printer-fill" id="togglePasswordIcon"></i>
                </Button>
            </div>
        </EditForm>
    </CardBody>
</Card>

<!-- Custom CSS -->
<style>
    .bg-blue {
        background-color: #2460b9;
    }

    .fw-bold {
    font-weight: bold;
    }

    .my-card-container {
    padding: 15px;
    margin: auto;
    background-color: white;
    border-radius: 15px;
    border: none;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.4);
    width: 24rem;
    }
</style>


@code {
    tms.Data.Ticket ticket = new tms.Data.Ticket
    {
        AddOns = new List<AddOn>
        {
            new AddOn { AddOnType = AddOnType.Camera, Quantity = 0 },
            new AddOn { AddOnType = AddOnType.VideoCamera, Quantity = 0 }
        }
    };


    private async Task HandleValidSubmit()
    {
        SanitizeTicketData();
        PrintData();
        if(await ticketService.FinalizeTicket(ticket))
        {
            ToastService.Notify(new(ToastType.Success, $"Ticket Printed Successfully."));
        }else
        {
            ToastService.Notify(new(ToastType.Danger, $"Error: Printing Ticket"));
        }
        ClearForm();
    }

    private AddOn GetOrCreateAddOn(AddOnType type)
    {
        var addon = ticket.AddOns.FirstOrDefault(a => a.AddOnType == type);
        if (addon == null)
        {
            addon = new AddOn { AddOnType = type };
            ticket.AddOns.Add(addon);
        }
        return addon;
    }
    private void SanitizeTicketData()
    {
      if (ticket.Nationality != Nationality.Nepali) ticket.PersonType = PersonType.General;
      if (!ticket.IsGroupVisit) ticket.NoOfPeople = 1;
      foreach (var addon in ticket.AddOns)
      {
          if (!ticket.IsGroupVisit) addon.Quantity = addon.IsSelected ? 1 : 0;
          else addon.Quantity = addon.Quantity > 0 ? addon.Quantity : 0;
      }
    }
    private void PrintData()
    {
        Console.WriteLine("Nationality: " + ticket.Nationality);
        Console.WriteLine("Person Type: " + ticket.PersonType);
        Console.WriteLine("Group Visit: " + ticket.IsGroupVisit);
        Console.WriteLine("No. of People: " + ticket.NoOfPeople);
        Console.WriteLine("Group Name: " + ticket.CustomText);

        foreach (var addon in ticket.AddOns)
        {
            Console.WriteLine($"Addon {addon.AddOnType}: Quantity = {addon.Quantity}");
        }
    }

    private void ClearForm()
    {
        ticket = new tms.Data.Ticket
            {
                AddOns = new List<AddOn>
        {
            new AddOn { AddOnType = AddOnType.Camera, Quantity = 0 },
            new AddOn { AddOnType = AddOnType.VideoCamera, Quantity = 0 }
        }
            };
    }
}

